  <!-- days form -->
    <div class="form-group">
        <div class="form-check form-check-inline">
            <label class="form-check-label" for="inlineCheckbox1">Days: </label>
        </div>
        
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" name="monChecked">
            <label class="form-check-label" for="inlineCheckbox1">Mon</label>
        </div>
        
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" id="inlineCheckbox2" name="tuesChecked">
            <label class="form-check-label" for="inlineCheckbox2">Tues</label>
        </div>
        
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" id="inlineCheckbox3" name="wedChecked">
            <label class="form-check-label" for="inlineCheckbox3">Wed</label>
        </div>

        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" id="inlineCheckbox3" name="thurChecked">
            <label class="form-check-label" for="inlineCheckbox3">Thur</label>
        </div>

        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" id="inlineCheckbox3" name="friChecked">
            <label class="form-check-label" for="inlineCheckbox3">Fri</label>
        </div>

        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" id="inlineCheckbox3" name="satChecked">
            <label class="form-check-label" for="inlineCheckbox3">Sat</label>
        </div>

        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" id="inlineCheckbox3" name="sunChecked">
            <label class="form-check-label" for="inlineCheckbox3">Sun</label>
        </div>
    </div>
    <!-- end of days form -->



    <form action="{{url_for('generate')}}">
    <!-- mealNum and days info form -->
    <div class="form-group invisible">
        <input type="text" name="mealNum" value="{{mealNum}}">
        <input type="text" name="days" value="{{days}}">
    </div>
    <!-- end of mealNum and days info form -->

    <!--back and generate button -->
    <a class="btn btn-outline-success float-left" href="/" role="button">Back</a>
    <button class="btn btn-outline-info float-right" type="submit">Generate</button>
    <!-- end of back and generate buttons -->
</form>





try:
        mealNum = request.args.get('mealNum')
        days = request.args.get('days')

        if(mealNum and days):
            day = int(days)
            meal = int(mealNum)
            limit1 = int(days)*int(mealNum)
            # flash(limit1)
            limit = Limit(ds=day, ms=meal, limit=limit1)
                # md = MealandDay(day=day, meal=meal)
            db.session.add(limit)
                # db.session.add(md)
            # db.session.commit()
            print('====================================')
            print('====================================')
            # print(meals)
            # print(days)
            print('====================================')
            print('====================================')


        ingPro = Ingredient.query.filter_by(type="pro")
        ingVeg = Ingredient.query.filter_by(type="veg")
        ingCarb = Ingredient.query.filter_by(type="carb")


    except exc.SQLAlchemyError as e:
        print(type(e))
        # return redirect(url_for('generate'))

    except:
        pass
        # return redirect(url_for('generate'))

    else:
        return render_template('ingredients.html', ingPro=ingPro, ingVeg=ingVeg, ingCarb=ingCarb)



try:
        added = request.form['protein']
        apiID = '1ddd0896'
        apiKEY = '58ef01156cda25a59462f34755cb565d'
        addURL = "https://api.edamam.com/search?app_id={0}&app_key={1}&q={2}".format(apiID, apiKEY, added)
        # limit check: numer of queries and number of meals
        if( (Limit.query.count()) != 1):
            return redirect(url_for('/'))
        curNum = Ingredient.query.filter_by(type="pro").count()

        if(curNum == Limit.query.first().limit):
            raise atMostError

        # typo & no found check
        foundNum = int(requests.get(addURL).json()['count'])
        if foundNum < 1:
            raise nofoundError
        # repeated check
        ingredient = Ingredient(type="pro", name=request.form['protein'])
        db.session.add(ingredient)
        db.session.commit()

    except nofoundError:
        flash("{} is not a valid input, plase check spelling or pick other protein".format(added))
    
    except atMostError:
        flash("at most {} protein ingredients allow".format(Limit.query.first().limit))

    except exc.SQLAlchemyError as e:
        flash('{} has already been added!'.format(added))
    
    except:
        pass

    finally:
        return redirect(url_for('ingredients'))


$ flask db stamp head  # To set the revision in the database to the head, without performing any migrations. You can change head to the required change you want.
$ flask db migrate     # To detect automatically all the changes.
$ flask db upgrade     # To apply all the changes.